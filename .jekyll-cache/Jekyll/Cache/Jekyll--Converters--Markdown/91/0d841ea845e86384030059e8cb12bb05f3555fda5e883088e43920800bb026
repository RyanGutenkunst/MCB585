I"¢∑<hr />
<h2 id="on-your-own">On Your Own</h2>

<p>¬†</p>
<h3 id="a-more-in-depth-look-at-data-types-in-r">A more in-depth look at Data Types in R</h3>

<p>To make the best of the R language, you‚Äôll need a strong understanding of the
basic data types and data structures and how to operate on them.</p>

<p>Data structures are very important to understand because these are the objects you 
will manipulate on a day-to-day basis in R. Dealing with object conversions is one
of the most common sources of frustration for beginners.</p>

<p><strong>Everything</strong> in R is an object.</p>

<p>R has 6 basic data types. In addition to the five listed below, there is also
<em>raw</em> which is rarely used and will not be discussed in this course.</p>

<ul>
  <li>character</li>
  <li>numeric (real or decimal; aka ‚Äúdouble‚Äù)</li>
  <li>integer</li>
  <li>logical</li>
  <li>complex</li>
</ul>

<p>Elements of these data types may be combined to form data structures, such as
atomic vectors. When we call a vector <em>atomic</em>, we mean that the vector only 
holds data of a single data type. Below are examples of atomic character vecotrs,
numeric vectors, integer vectors, etc.</p>

<ul>
  <li><strong>character</strong>: <code class="language-plaintext highlighter-rouge">"a"</code>, <code class="language-plaintext highlighter-rouge">"swc"</code></li>
  <li><strong>numeric</strong>: <code class="language-plaintext highlighter-rouge">2</code>, <code class="language-plaintext highlighter-rouge">15.5</code></li>
  <li><strong>integer</strong>: <code class="language-plaintext highlighter-rouge">2L</code> (the <code class="language-plaintext highlighter-rouge">L</code> tells R to store this as an integer)</li>
  <li><strong>logical</strong>: <code class="language-plaintext highlighter-rouge">TRUE</code>, <code class="language-plaintext highlighter-rouge">FALSE</code></li>
  <li><strong>complex</strong>: <code class="language-plaintext highlighter-rouge">1+4i</code> (complex numbers with real and imaginary parts)</li>
</ul>

<p>R provides many functions to examine features of vectors and other objects, for
example</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">class()</code> - what kind of object is it (high-level)?</li>
  <li><code class="language-plaintext highlighter-rouge">typeof()</code> - what is the object‚Äôs data type (low-level)?</li>
  <li><code class="language-plaintext highlighter-rouge">length()</code> - how long is it (one-dimensional objects)?</li>
  <li><code class="language-plaintext highlighter-rouge">dim()</code> - what are its dimensions? (two-dimensional objects)?</li>
  <li><code class="language-plaintext highlighter-rouge">attributes()</code> - does it have any metadata?</li>
</ul>

<p>Here are a couple of examples:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Example 1 -- a character variable object</span><span class="w">
</span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"dataset"</span><span class="w">
</span><span class="n">typeof</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "character"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">class</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "character"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">attributes</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="c1"># simple objects to not have attributes by default</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NULL
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Example 2 -- an integer vector object</span><span class="w">
</span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="w">
</span><span class="n">y</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> [1]  1  2  3  4  5  6  7  8  9 10
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">typeof</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "integer"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">length</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 10
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Example 3 -- a numeric vector object</span><span class="w">
</span><span class="n">z</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span><span class="n">z</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> [1]  1  2  3  4  5  6  7  8  9 10
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">typeof</span><span class="p">(</span><span class="n">z</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "double"
</code></pre></div></div>

<p>¬†</p>
<h4 id="examining-vectors">Examining Vectors</h4>

<p>The functions <code class="language-plaintext highlighter-rouge">typeof()</code>, <code class="language-plaintext highlighter-rouge">length()</code>, <code class="language-plaintext highlighter-rouge">class()</code> and <code class="language-plaintext highlighter-rouge">str()</code> provide useful
information about your vectors and R objects in general.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">typeof</span><span class="p">(</span><span class="n">z</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "double"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">length</span><span class="p">(</span><span class="n">z</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 10
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">class</span><span class="p">(</span><span class="n">z</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "numeric"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">str</span><span class="p">(</span><span class="n">z</span><span class="p">)</span><span class="w"> </span><span class="c1"># stands for "structure" of an object</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> num [1:10] 1 2 3 4 5 6 7 8 9 10
</code></pre></div></div>

<p>¬†</p>

<p>The first example creates a vector <code class="language-plaintext highlighter-rouge">x</code> of mode <code class="language-plaintext highlighter-rouge">numeric</code>. These are the most common kind, and are treated as double precision real numbers. If you wanted to explicitly create integers, you need to add an <code class="language-plaintext highlighter-rouge">L</code> to each element</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">3L</span><span class="p">)</span><span class="w">
</span><span class="n">typeof</span><span class="p">(</span><span class="n">x1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "integer"
</code></pre></div></div>

<p>¬†</p>

<p>You can also <em>coerce</em> a vector to the integer type using <code class="language-plaintext highlighter-rouge">as.integer()</code>.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.integer</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Warning: NAs introduced by coercion
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">typeof</span><span class="p">(</span><span class="n">x2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "integer"
</code></pre></div></div>

<p>¬†</p>

<p>R has many <strong>data structures</strong>. These include</p>

<ul>
  <li>atomic vector</li>
  <li>list</li>
  <li>matrix</li>
  <li>data frame</li>
  <li>factors</li>
</ul>

<hr />
<h3 id="factors">Factors</h3>

<p>Factors are a special type of data in R, primarily used to represent categorical data. Factors can be ordered or unordered and are an important class for statistical analysis and for plotting.</p>

<p>Factors look (and often behave) like character vectors, but assuming that they are character vectors can lead to unexpected behavior. Factors are actually integers under the hood, and you need to be careful when treating them
like strings.</p>

<p>Factors have three essential properties:</p>
<ul>
  <li>A list of integers.</li>
  <li>A set of labels defining the label for the integer.</li>
  <li>An order for the labels.</li>
</ul>

<p>The integer defines the value of each element in the factor, the label indicates what that value means, and the order defines the relationship between the values.</p>

<p>Once created, factors can only contain a pre-defined set values, known as
<em>levels</em>. By default, R sorts <em>levels</em> in alphabetical order. For
instance, let‚Äôs use the <code class="language-plaintext highlighter-rouge">factor()</code> command to create a factor with 2 levels:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sex</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"male"</span><span class="p">))</span><span class="w">
</span><span class="n">sex</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] male   female female male  
Levels: female male
</code></pre></div></div>

<p>¬†</p>

<p>Now compare this to a similar <code class="language-plaintext highlighter-rouge">character</code> vector:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sex.char</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"male"</span><span class="p">)</span><span class="w">
</span><span class="n">sex.char</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "male"   "female" "female" "male"  
</code></pre></div></div>

<p>¬†</p>

<p>Note that the elements of <code class="language-plaintext highlighter-rouge">sex.char</code> have quotation marks, while the object <code class="language-plaintext highlighter-rouge">sex</code> had a list of levels.</p>

<p>R will assign <code class="language-plaintext highlighter-rouge">1</code> to the level <code class="language-plaintext highlighter-rouge">"female"</code> and <code class="language-plaintext highlighter-rouge">2</code> to the level <code class="language-plaintext highlighter-rouge">"male"</code> (because
<code class="language-plaintext highlighter-rouge">f</code> comes before <code class="language-plaintext highlighter-rouge">m</code>, even though the first element in this vector is
<code class="language-plaintext highlighter-rouge">"male"</code>). You can check this by using the function <code class="language-plaintext highlighter-rouge">levels()</code>, and check the
number of levels using <code class="language-plaintext highlighter-rouge">nlevels()</code>:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">levels</span><span class="p">(</span><span class="n">sex</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "female" "male"  
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nlevels</span><span class="p">(</span><span class="n">sex</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 2
</code></pre></div></div>

<p>¬†</p>

<p>One major functional difference is that the elements of the <code class="language-plaintext highlighter-rouge">character</code> vector only have the inherent order defined by their values (e.g. alphabetical). Sometimes, the order of the factors does not matter, other times you might want
to specify the order because it is meaningful. For instance, ‚Äúlow‚Äù, ‚Äúmedium‚Äù, ‚Äúhigh‚Äù as elements of a character vector have the implicit alphabetical order:</p>

<p>¬†¬†¬†¬†¬†¬†‚Äúhigh‚Äù &lt; ‚Äúlow‚Äù &lt; ‚Äúmedium‚Äù</p>

<p>while the more meaningful conceptual ordering is:</p>

<p>¬†¬†¬†¬†¬†¬†‚Äúlow‚Äù &lt; ‚Äúmedium‚Äù &lt; ‚Äúhigh‚Äù</p>

<p>Factor levels allow us to specify the conceptual order:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">food</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"low"</span><span class="p">,</span><span class="w"> </span><span class="s2">"high"</span><span class="p">,</span><span class="w"> </span><span class="s2">"medium"</span><span class="p">,</span><span class="w"> </span><span class="s2">"high"</span><span class="p">,</span><span class="w"> </span><span class="s2">"low"</span><span class="p">,</span><span class="w"> </span><span class="s2">"medium"</span><span class="p">,</span><span class="w"> </span><span class="s2">"high"</span><span class="p">))</span><span class="w">
</span><span class="n">levels</span><span class="p">(</span><span class="n">food</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "high"   "low"    "medium"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">class</span><span class="p">(</span><span class="n">food</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "factor"
</code></pre></div></div>

<p>¬†</p>

<p>Adding the ‚Äúlevels‚Äù input to factor defines the level order if it is non-alphabetic</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">food</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="n">food</span><span class="p">,</span><span class="w"> </span><span class="n">levels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"low"</span><span class="p">,</span><span class="w"> </span><span class="s2">"medium"</span><span class="p">,</span><span class="w"> </span><span class="s2">"high"</span><span class="p">))</span><span class="w">
</span><span class="n">levels</span><span class="p">(</span><span class="n">food</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "low"    "medium" "high"  
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">class</span><span class="p">(</span><span class="n">food</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "factor"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">min</span><span class="p">(</span><span class="n">food</span><span class="p">)</span><span class="w"> </span><span class="c1"># note that relative operations do not work; why not?</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error in Summary.factor(structure(c(1L, 3L, 2L, 3L, 1L, 2L, 3L), .Label = c("low", : 'min' not meaningful for factors
</code></pre></div></div>

<p>¬†</p>

<p>If you want R to interpret relative relationships between elements, you have to be explicit that the order of the factors is important.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">food</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="n">food</span><span class="p">,</span><span class="w"> </span><span class="n">levels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"low"</span><span class="p">,</span><span class="w"> </span><span class="s2">"medium"</span><span class="p">,</span><span class="w"> </span><span class="s2">"high"</span><span class="p">),</span><span class="w"> </span><span class="n">ordered</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">levels</span><span class="p">(</span><span class="n">food</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "low"    "medium" "high"  
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">class</span><span class="p">(</span><span class="n">food</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "ordered" "factor" 
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">min</span><span class="p">(</span><span class="n">food</span><span class="p">)</span><span class="w"> </span><span class="c1"># now it works!</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] low
Levels: low &lt; medium &lt; high
</code></pre></div></div>

<p>¬†</p>

<p>Note that numeric operations still do not work:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">food</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">food</span><span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Warning in Ops.ordered(food[1], food[2]): '+' is not meaningful for ordered
factors
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] NA
</code></pre></div></div>

<p>¬†</p>

<p>In R‚Äôs memory, these factors are represented by numbers (1, 2, 3). They are
better than using simple integer labels because factors are self describing:
<code class="language-plaintext highlighter-rouge">"low"</code>, <code class="language-plaintext highlighter-rouge">"medium"</code>, and <code class="language-plaintext highlighter-rouge">"high"</code>‚Äù is more descriptive than <code class="language-plaintext highlighter-rouge">1</code>, <code class="language-plaintext highlighter-rouge">2</code>, <code class="language-plaintext highlighter-rouge">3</code>. Which
is low?  You wouldn‚Äôt be able to tell with just integer data. Factors have this
information built in. It is particularly helpful when there are many levels
(like the subjects in our example data set).</p>

<p>What happens if we try to add an element to our factor that is not in the current list of levels?</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">length</span><span class="p">(</span><span class="n">food</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 7
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">food</span><span class="p">[</span><span class="m">8</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"frog"</span><span class="w"> </span><span class="c1"># doesn't work! The level "frog" is not defined</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Warning in `[&lt;-.factor`(`*tmp*`, 8, value = "frog"): invalid factor level, NA
generated
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">food</span><span class="p">[</span><span class="m">8</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"low"</span><span class="w"> </span><span class="c1"># note that this works to add an 8th element to `food`</span><span class="w">
</span><span class="n">food</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] low    high   medium high   low    medium high   low   
Levels: low &lt; medium &lt; high
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">food</span><span class="p">[</span><span class="m">10</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"high"</span><span class="w"> </span><span class="c1"># skipping a spot induces the creation of NAs to fill in data</span><span class="w">
</span><span class="n">food</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> [1] low    high   medium high   low    medium high   low    &lt;NA&gt;   high  
Levels: low &lt; medium &lt; high
</code></pre></div></div>

<blockquote class="challenge">
  <h2 id="representing-data-in-r">Representing Data in R</h2>

  <p>You have a vector representing levels of exercise undertaken by 5 subjects</p>

  <p><strong>‚Äúl‚Äù, ‚Äún‚Äù, ‚Äún‚Äù, ‚Äúi‚Äù, ‚Äúl‚Äù</strong> ; n=none, l=light, i=intense</p>

  <p>What is the best way to represent this in R?</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">exercise</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"l"</span><span class="p">,</span><span class="w"> </span><span class="s2">"n"</span><span class="p">,</span><span class="w"> </span><span class="s2">"n"</span><span class="p">,</span><span class="w"> </span><span class="s2">"i"</span><span class="p">,</span><span class="w"> </span><span class="s2">"l"</span><span class="p">)</span><span class="w"> </span><span class="c1"># (a)</span><span class="w">
</span><span class="n">exercise</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"l"</span><span class="p">,</span><span class="w"> </span><span class="s2">"n"</span><span class="p">,</span><span class="w"> </span><span class="s2">"n"</span><span class="p">,</span><span class="w"> </span><span class="s2">"i"</span><span class="p">,</span><span class="w"> </span><span class="s2">"l"</span><span class="p">),</span><span class="w"> </span><span class="n">ordered</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> </span><span class="c1"># (b)</span><span class="w">
</span><span class="n">exercise</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="o">-</span><span class="n">factor</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"l"</span><span class="p">,</span><span class="w"> </span><span class="s2">"n"</span><span class="p">,</span><span class="w"> </span><span class="s2">"n"</span><span class="p">,</span><span class="w"> </span><span class="s2">"i"</span><span class="p">,</span><span class="w"> </span><span class="s2">"l"</span><span class="p">),</span><span class="w"> </span><span class="n">levels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"n"</span><span class="p">,</span><span class="w"> </span><span class="s2">"l"</span><span class="p">,</span><span class="w"> </span><span class="s2">"i"</span><span class="p">),</span><span class="w"> </span><span class="n">ordered</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w"> </span><span class="c1"># (c)</span><span class="w">
</span><span class="n">exercise</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"l"</span><span class="p">,</span><span class="w"> </span><span class="s2">"n"</span><span class="p">,</span><span class="w"> </span><span class="s2">"n"</span><span class="p">,</span><span class="w"> </span><span class="s2">"i"</span><span class="p">,</span><span class="w"> </span><span class="s2">"l"</span><span class="p">),</span><span class="w"> </span><span class="n">levels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"n"</span><span class="p">,</span><span class="w"> </span><span class="s2">"l"</span><span class="p">,</span><span class="w"> </span><span class="s2">"i"</span><span class="p">),</span><span class="w"> </span><span class="n">ordered</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> </span><span class="c1"># (d)</span><span class="w">
</span></code></pre></div>  </div>

  <blockquote class="solution">
    <h2 id="solution">Solution</h2>
    <p>Correct solution is <strong>(d)</strong></p>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">exercise</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"l"</span><span class="p">,</span><span class="w"> </span><span class="s2">"n"</span><span class="p">,</span><span class="w"> </span><span class="s2">"n"</span><span class="p">,</span><span class="w"> </span><span class="s2">"i"</span><span class="p">,</span><span class="w"> </span><span class="s2">"l"</span><span class="p">),</span><span class="w"> </span><span class="n">levels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"n"</span><span class="p">,</span><span class="w"> </span><span class="s2">"l"</span><span class="p">,</span><span class="w"> </span><span class="s2">"i"</span><span class="p">),</span><span class="w"> </span><span class="n">ordered</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">exercise</span><span class="w">
</span></code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] l n n i l
Levels: n &lt; l &lt; i
</code></pre></div>    </div>
    <p>¬†</p>

    <p>We only expect three categories (‚Äún‚Äù, ‚Äúl‚Äù, ‚Äúi‚Äù).
We can order these from least intense to most intense, so let‚Äôs use <code class="language-plaintext highlighter-rouge">ordered</code>.</p>
  </blockquote>
</blockquote>

<p>¬†</p>
<h4 id="converting-factors">Converting Factors</h4>

<p>Converting from a factor to a number can cause problems:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">3.4</span><span class="p">,</span><span class="w"> </span><span class="m">1.2</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="p">))</span><span class="w">
</span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">f</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 2 1 3
</code></pre></div></div>

<p>¬†</p>

<p>This does not behave as expected (and there is no warning). The reason is that the apparent numeric values are actually stored as integers (2, 1, 3) with labels (‚Äú3.4‚Äù, ‚Äú1.2‚Äù, ‚Äú5‚Äù). R uses the integer vaue when trying to perform the <code class="language-plaintext highlighter-rouge">as.numeric()</code> function.</p>

<p>The recommended way is to use the integer vector to index the factor levels:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">levels</span><span class="p">(</span><span class="n">f</span><span class="p">)[</span><span class="n">f</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "3.4" "1.2" "5"  
</code></pre></div></div>

<p>¬†</p>

<p>The factor really consists of two elements:</p>
<ul>
  <li>The ordered integer list: <code class="language-plaintext highlighter-rouge">2, 1, 3</code></li>
  <li>The ‚Äúkey‚Äù indicating which integer corresponds to which level: <code class="language-plaintext highlighter-rouge">1 = 1.2</code>, <code class="language-plaintext highlighter-rouge">2 = 3.4</code>, <code class="language-plaintext highlighter-rouge">3 = 5</code></li>
</ul>

<p>To break this down the <code class="language-plaintext highlighter-rouge">levels(f)[f]</code>:</p>
<ol>
  <li>First we grabe the list of levels using <code class="language-plaintext highlighter-rouge">levels(f)</code>, which outputs a character vector: ‚Äú1.2‚Äù ‚Äú3.4‚Äù ‚Äú5‚Äù.</li>
  <li>Next we index this list with <code class="language-plaintext highlighter-rouge">[f]</code>. Because the index requests a numeric representation of the factor <code class="language-plaintext highlighter-rouge">f</code>, R replaces the <code class="language-plaintext highlighter-rouge">[f]</code> with <code class="language-plaintext highlighter-rouge">[c(2,1,3)]</code> (the integer portion of the factor object).</li>
  <li>R returns the elements of the character list in (1) with the order indicated by the integer list in (2).</li>
</ol>

<p>To convert that value of <code class="language-plaintext highlighter-rouge">f</code> to a basic <code class="language-plaintext highlighter-rouge">numeric</code> type, we still need to assign the values output above using <code class="language-plaintext highlighter-rouge">&lt;-</code> and the <code class="language-plaintext highlighter-rouge">as.numeric()</code>:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">levels</span><span class="p">(</span><span class="n">f</span><span class="p">)[</span><span class="n">f</span><span class="p">]</span><span class="w">
</span><span class="n">f</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">f</span><span class="p">)</span><span class="w">
</span><span class="n">f</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 3.4 1.2 5.0
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">class</span><span class="p">(</span><span class="n">f</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "numeric"
</code></pre></div></div>

<hr />
<h3 id="missing-data-and-special-values">Missing data and special values</h3>

<p>R supports both missing data and special values in data structures.</p>

<p>¬†</p>
<h4 id="missing-data">Missing Data</h4>

<p>Missing data is represented as <code class="language-plaintext highlighter-rouge">NA</code> (Not Available)
and can be used for all the vector types covered in this lesson:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0.5</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="m">0.7</span><span class="p">)</span><span class="w">
</span><span class="n">y2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">)</span><span class="w">
</span><span class="n">y3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">,</span><span class="w"> </span><span class="s2">"d"</span><span class="p">,</span><span class="w"> </span><span class="s2">"e"</span><span class="p">)</span><span class="w">
</span><span class="n">y4</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1+5i</span><span class="p">,</span><span class="w"> </span><span class="m">2-3i</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>¬†</p>

<p>The function <code class="language-plaintext highlighter-rouge">is.na()</code> indicates the elements of the vectors that represent
missing data, and the function <code class="language-plaintext highlighter-rouge">anyNA()</code> returns <code class="language-plaintext highlighter-rouge">TRUE</code> if the vector contains
any missing values:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">,</span><span class="w"> </span><span class="s2">"d"</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">)</span><span class="w">
</span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"b"</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">,</span><span class="w"> </span><span class="s2">"d"</span><span class="p">,</span><span class="w"> </span><span class="s2">"e"</span><span class="p">)</span><span class="w">
</span><span class="nf">is.na</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] FALSE  TRUE FALSE FALSE  TRUE
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">is.na</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] FALSE FALSE FALSE FALSE FALSE
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">anyNA</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] TRUE
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">anyNA</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] FALSE
</code></pre></div></div>

<p>¬†</p>
<h4 id="other-special-values">Other Special Values</h4>

<p><code class="language-plaintext highlighter-rouge">Inf</code> is infinity. You can have either positive or negative infinity.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">1</span><span class="o">/</span><span class="m">0</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] Inf
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">-1</span><span class="o">/</span><span class="m">0</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] -Inf
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">10</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="kc">Inf</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] Inf
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">1</span><span class="o">/</span><span class="kc">Inf</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 0
</code></pre></div></div>

<p>¬†</p>

<p><code class="language-plaintext highlighter-rouge">NaN</code> means Not a Number. It‚Äôs an undefined value. However, it can still be a placeholder in a numeric vector.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">0</span><span class="o">/</span><span class="m">0</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] NaN
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="kc">NaN</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] NaN
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kc">Inf</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="kc">NaN</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] NaN
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="kc">NaN</span><span class="p">)</span><span class="w">
</span><span class="n">typeof</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "double"
</code></pre></div></div>

<hr />

:ET